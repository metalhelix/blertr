#!/usr/bin/env ruby

$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))

require 'blertr'

action = ARGV.shift
parameters = ARGV

def add_services services, time
  puts services
end

def help
  help_string = <<EOS
-=[ Welcome to Blertr - Notifications for Bash commands ]=-

Usage: blertr [command] [command parameters]

Commands:
    help       Output this help message

    install    Add symlinks to your system to allow
               Blertr to function properly

    uninstall  Remove symlinks and other setup process
               Effectively uninstalling Blertr

    upgrade    Updates current copy of blertr to latest version
    
    info       Pass in a notifier name to get the 
               information it is using to send notifications
               Example: blertr info email

    status     For each notifier, Blertr lists if it currently can
               send notifications and then lists any error messages
               if it cannot. Useful for debuggin problems with notifiers

    exclude    Pass in a shell command to prevent Blertr from
               sending notifications when that command is 
               executed
               Example: blertr exclude ssh
   
    time       Pass in a notifier name and a time string to
               set the time required to pass before the
               notifier sends a message for a command
               Example: blertr time email 5 minutes
               This would make blertr send an email only if
               the command executing took longer than 5 mins
EOS
  puts help_string
end

def take_action action, parameters
  case action
  when "help"
    help
  when "install"
    blertr_path = File.expand_path(File.join(File.dirname(__FILE__), ".."))
    blertr_symlink = File.expand_path("~/.blertr")
    if File.exists? blertr_symlink
      puts "ERROR: Blertr appears to already be installed.\nUninstall with blertr remove"
    else
      puts "creating symlink from #{blertr_path} to #{blertr_symlink}"
      system("ln -s #{blertr_path} #{blertr_symlink}")
      puts "Blertr is now (almost) installed!\nPut this at the bottom of your .bashrc file:"
      puts "[[ -s \"$HOME/.blertr/scripts/blertr\" ]] && . \"$HOME/.blertr/scripts/blertr\""
    end
  when "uninstall"
    blertr_symlink = File.expand_path("~/.blertr")
    if File.exists? blertr_symlink
      puts "Removing ~/.blertr"
      system("rm #{blertr_symlink}")
      puts "Blertr is now (almost) uninstalled.\nRemove from .bashrc file:"
      puts "[[ -s \"$HOME/.blertr/scripts/blertr\" ]] && . \"$HOME/.blertr/scripts/blertr\""
    else
      puts "ERROR: it doesn't look like Blertr is installed"
    end
  when "upgrade"
    commands = ["gem install blertr", "blertr uninstall", "blertr install"]
    puts "Right now the upgrade process is very basic. Blertr will run:"
    commands.each {|c| puts "$ #{c}"}
    puts "This assumes that blertr is installed using rvm and doesn't require"
    puts " sudo access."
    puts "That ok? (y/n)"
    response = gets
    if ["y","Y","yes","Yes","YES"].include?(response.chomp)
      puts "Ok, running commands now."
      commands.each {|c| system(c)}
    else
      puts "You're the boss, exiting now."
    end
  when "info"
    raw_name = parameters.shift
    if Blertr::Control::is_notifier? raw_name
      name = Blertr::Control::notifier_with_name(raw_name).name
      info_hash = Blertr::Options.options_for name
      puts "Configuration for: #{name}"
      if info_hash.empty?
        puts "No configuration file for #{name} or config file is empty"
      else
        info_hash.each do |key,value|
          puts "#{key}: #{value}"
        end
      end
    else
      if !raw_name or (raw_name and raw_name.empty?)
        puts "info requires the name of a notifier"
      else
        puts "Sorry, #{raw_name} is not a notifier"
      end
    end
  when "status"
    Blertr::Control::notifiers.each do |notifier|
      notify_message = notifier.can_alert? ? "can alert" : "cannot alert"
      puts "#{notifier.name}: #{notify_message}"
      if !notifier.error_messages.empty?
        notifier.error_messages.each {|err| puts "  #{err}"}
      end
    end
  when "exclude"
    name = parameters.join(" ")
    puts "Excluding #{name} from Blertr alerts"
    Blertr::Blacklist.new.add(name)
  when "time"
    notifier_found = false
    notifiers = parameters.shift.split(",")
    notifiers.each do |notifier|
      if Blertr::Control::is_notifier? notifier
        notifier_found = true
        new_time = parameters.join(" ")
        Blertr::Control::change_time notifier, new_time
      end
    end

    if !notifier_found
      puts "Sorry, #{action} isn't a notifier."
      puts "Use blertr status for a list of all notifiers"
    end
  else
      puts "Sorry, #{action} isn't a recognized command"
      puts "use blertr help to get a list of availible commands."
  end
end

if action
  take_action action.downcase, parameters
else
  puts "usage blertr [command] [command parameters]"
end
