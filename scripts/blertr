#!/usr/bin/env bash

# Quick notes to remember for bash scripting:
# Found Here: http://www.gnu.org/s/bash/manual/bash.txt
#
# -z STRING
#  True if the length of STRING is zero
#
# -f FILE
#  True if FILE exists and is a regular file
#
# ${PARAMETER:-WORD}
#  If PARAMETER is unset or null, the expansion of WORD is substituted.
#  Otherwise, the value of PARAMETER is substituted.
#  So ${blertr_path:-} is substituting an empty WORD if the PARAMETER 
#  blertr_path is not found.
#

export HOME="${HOME%%+(\/)}" # Remove trailing slashes if they exist on HOME

if [[ -z "${blertr_path:-}" ]]
then

  if [[ -z "${blertr_prefix:-}" ]]
  then
    true ${blertr_user_install_flag:=0}
    if (( UID > 0 || blertr_user_install_flag == 1 ))
    then
      blertr_prefix="$HOME"
    else
      blertr_prefix="/usr/local"
    fi
  fi

#  if [[ -z "${blertr_path:-}" ]]
#  then
#    if [[ "$blertr_prefix" = "$HOME" ]]
#    then
#      blertr_path="${blertr_prefix}/.blertr/app"
#    else
#      blertr_path="${blertr_prefix}/blertr/app"
#    fi
#  fi
  
  blertr_path="${blertr_prefix}/.blertr/app"
  # this is where the blert_now.rb file lives
  blertr_bin_path="${blertr_path}/scripts_bin"

  # export so that we have access to them from
  # the scripts/cli file
  export blertr_path="${blertr_path%%+(\/)}"
  export blertr_bin_path="${blertr_bin_path%%+(\/)}"
fi

# load the bash files that add hooks for executing commands
if [[ -n "${blertr_path}" && -d "$blertr_path" ]]
then
  true ${blertr_scripts_path:="$blertr_path/scripts"}

  for script in preexec cli
  do
    if [[ -f "$blertr_scripts_path/$script" ]]
    then
      source "$blertr_scripts_path/$script"
    else
      printf "WARNING:
      Could not source '$blertr_scripts_path/$script' as file does not exist.
      Blertr will likely not work as expected.\n"
    fi
  done
fi

